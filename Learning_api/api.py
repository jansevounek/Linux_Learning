from flask import Flask, jsonify, request
import subprocess
from flask_cors import CORS
import json
import docker
import os
import shutil
import tempfile
import sqlite3


app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

@app.route('/test/<command>', methods=['GET'])
def execute_command(command):
    result = subprocess.check_output(command, shell = True, executable = "/bin/bash", stderr = subprocess.STDOUT)
    rs = result.decode('utf-8')
    return jsonify({'command': rs})

#Route that starts a session
#(It starts a docker container that a user can use)
@app.route('/start_session', methods=['POST'])
def start_session():
    data = request.get_json()

    dump_commands_into_json_file(data)

    start_docker_container()

    return jsonify({'success': 'success'})

#Puts commands allowed in the container into the json config file
#TODO add data
def dump_commands_into_json_file(data):
    # taken from https://www.geeksforgeeks.org/reading-and-writing-json-to-a-file-in-python/
    cm = ['/bin/ls', '/bin/mkdir']

    commands = {
        'allowed_commands' : cm
    }

    json_object = json.dumps(commands, indent=1)

    with open("commands.json", "w") as outfile:
        outfile.write(json_object)

def start_docker_container():
    client = docker.from_env()

    #Generated by chatgpt question: 
    #file start 
    #FROM alpine:latest
    #RUN apk update && apk add --no-cache bash sudo jq
    #COPY commands.json /etc/commands.json
    #RUN adduser -D user
    #RUN jq -r '.allowed_commands[] | "user ALL=(ALL) NOPASSWD: \(.);"' /etc/commands.json >> /etc/sudoers
    #USER user
    #CMD ["/bin/bash"]
    #file end 
    #Could you rewrite me this file in python docker plugin
    # Initialize the Docker client
    client = docker.from_env()

    base_image = 'alpine:latest'

    packages = ['bash', 'sudo', 'jq']

    json_file = 'commands.json'

    sudoers_commands = []

    with open(json_file, 'r') as f:
        commands = json.load(f)
        for command in commands['allowed_commands']:
            sudoers_commands.append(f"echo 'user ALL=(ALL) NOPASSWD: {command};' | tee -a /etc/sudoers")


    sudoers_content = " && \\\n".join(sudoers_commands)

    dockerfile_content = f"""
        FROM {base_image}
        RUN apk update && apk add --no-cache {' '.join(packages)}
        COPY {json_file} /etc/{json_file}
        RUN adduser -D user
        RUN {sudoers_content.strip()}
        USER user
        CMD ["/bin/bash"]
        """

    temp_dir = tempfile.mkdtemp()
    try:
        with open(os.path.join(temp_dir, 'Dockerfile'), 'w') as dockerfile:
            dockerfile.write(dockerfile_content)

        shutil.copy(json_file, temp_dir)

        response = client.images.build(
            path=temp_dir,
            tag='web_image',
            rm=True
        )
        client.containers.run(
            'web_image',
            detach=True
        )
        print(response)
    finally:
        shutil.rmtree(temp_dir)
    
    subprocess.run('sudo docker ps -a', shell = True, executable = "/bin/bash", stderr = subprocess.STDOUT)
    

if __name__ == '__main__':
    app.run()